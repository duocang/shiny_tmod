runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
shiny::runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
shinyApp(
ui = fluidPage(DT::dataTableOutput('tbl')),
server = function(input, output) {
output$tbl = DT::renderDataTable(
iris, options = list(lengthChange = FALSE)
)
}
)
shinyApp(
ui = fluidPage(DT::dataTableOutput('tbl'),
titlePanel("Uploading Files")),
server = function(input, output) {
output$tbl = DT::renderDataTable(
iris, options = list(lengthChange = FALSE)
)
}
)
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
shiny::runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
runApp('Desktop/shiny/test')
library(shiny); runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
install.packages("vcfR")
library(vcfR)
tumor.indel <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.indel.vcf")
tumor.snp <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.snp.vcf")
data.frame(tumor.indel)
data.frame(tumor.snp)
create.chromR((name='Supercontig', tumor.indel))
isGermlinePrefilter(tumor.indel)
library(vcfR)
tumor.indel <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.indel.vcf")
tumor.snp <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.snp.vcf")
isGermlinePrefilter <- function(x) {
grepl("Germline", x, fixed=TRUE)
}
isGermlinePrefilter(tumor.indel)
create.chromR((name='Supercontig', tumor.indel))
header(tumor.indel)
source("https://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation")
library(vcfR)
tumor.indel <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.indel.vcf")
tumor.snp <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.snp.vcf")
library(vcfR)
indel <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.indel.vcf")
snp <- read.vcfR("/Users/song/OneDrive/4/9/da/tumor.snp.vcf")
View(indel)
rownames(snp)
library(vcfR)
identical(rownames(snp), VCFlabels("/Users/song/OneDrive/4/9/da/tumor.snp.vcf"))
shiny::runApp('code/shiny/test')
shiny::runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
shiny::runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
shiny::runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
help("tabItem")
runApp('code/shiny/test')
shinyApp(ui, server)
rm(list = ls())
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Simple tabs"),
dashboardSidebar(
sidebarMenu(id = "tabs",
menuItem("Menu Item 1", tabName = "one", icon = icon("dashboard")),
menuItem("Menu Item 1", tabName = "two", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "one",h2("Dashboard tab content"),actionButton('switchtab', 'Switch tab')),
tabItem(tabName = "two",h2("Widgets tab content"))
)
)
)
server <- function(input, output, session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs, "one" = "two","two" = "one")
updateTabItems(session, "tabs", newtab)
})
}
shinyApp(ui, server)
rm(list = ls())
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Simple tabs"),
dashboardSidebar(
sidebarMenu(id = "tabs",
menuItem("Menu Item 1", tabName = "one", icon = icon("dashboard")),
menuItem("Menu Item 1", tabName = "two", icon = icon("th"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "one",h2("Dashboard tab content"),actionButton('switchtab', 'Switch tab')),
tabItem(tabName = "two",h2("Widgets tab content"))
)
)
)
server <- function(input, output, session) {
observeEvent(input$switchtab, {
newtab <- switch(input$tabs, "one" = "two","two" = "one")
updateTabItems(session, "tabs", newtab)
})
}
shinyApp(ui, server)
runApp('Downloads')
runApp('Downloads')
runApp('Desktop/app copy.R')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
install.packages("markdown")
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
library(shiny); runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
runApp('Desktop/app copy.R')
install.packages("shinyBS")
install.packages("shinyBS")
runApp('Desktop/app copy.R')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
install.packages("ggplot2")
install.packages("plyr")
install.packages("plotly")
runApp('Downloads')
install.packages("ggthemes")
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Downloads')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Downloads')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
install.packages("leaflet")
runApp('code/shiny/test')
runApp('code/R_Shiny/dataAnayltics')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('Desktop/app copy.R')
install.packages("rmarkdown")
runApp('Desktop/app copy.R')
runApp('Desktop/fads')
runApp('Desktop/app copy.R')
runApp('Desktop')
runApp('Desktop/fads')
runApp('Desktop/fads')
runApp('Desktop/fads')
runApp('Desktop/fads')
runApp('Desktop/fads')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
install.packages("purbayes")
install.packages("PurBayes")
library("PurBayes")
install.packages("rjags")
install.packages("coda")
install.packages("coda")
library("coda")
library("rjags")
library("rjags")
library(rjags)
library(PurBayes)
install.packages("rjags")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
install.packages("/Users/song/Downloads/rjags_4-4.tar.gz", repos = NULL, type="source")
library(rjags)
install.packages(pkgs = c("coda", "rjags", "runjags"),
repos = "http://cran.fhcrc.org/")
install.packages(pkgs = c("coda", "rjags", "runjags"), repos = "http://cran.fhcrc.org/")
library(rjags)
install.packages("rjags")
install.packages("R2jags")
library(rjags)
library(PurBayes)
library(PurBayes)
library(rjags)
install.packages("rjags", dependencies=TRUE,
> +       lib= "C:/Users/Margaret Donald/Documents/R/win-library/3.2")
trying URL 'https://cran.r-project.org/bin/windows/contrib/3.2/rjags_4-4.zip')
install.packages("rjags", dependencies=TRUE,
)
install.packages("PurBayes")
library(PurBayes)
install.packages("rjags")
library(rjags)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
install.packages("rjags")
library(rjags)
uninstall.packages("rjags")
remove.packages("rjags")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/4/rjags_4-4.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
library(rjags)
library(PurBayes)
install.packages("rjags", configure.args="--enable-rpath")
library(PurBayes)
remove.packages("rjags")
remove.packages("rjags")
install.packages("rjags", configure.args="--with-jags...")
library(PurBayes)
install.packages("/Users/song/Downloads/rjags_4-4.tar.gz", repos = NULL, type="source")
library(R2jags)
library(rjags)
library(rjags)
library(PurBayes)
shiny::runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
pie <- tmodDecideTests(g=dat[[1]][,  "G
)
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
runApp('code/shiny/test')
library(tmod)
setwd("/Users/song/code/shiny/example")
## data loading; this should be done by the interface
file_list <- c("tt_1_TB.csv", "tt_2_S.csv", "tt_3_TBvS.csv", "tt_4_TBaS.csv")
## data is a list; each element is a data frame with several columns that can be used to sort the data
## each of these data frames corresponds to one testing condition (=one "contrast")
data <- sapply(file_list, function(x) read.csv(x, header=TRUE, row.names=1, stringsAsFactors=FALSE), simplify=FALSE)
names(data) <- gsub(".*_([A-Za-z]*)\\.csv", "\\1", file_list)
## the user has to make the following choices:
## 1. which column contains gene names
gn.col <- "GeneName"
## 2. which column to use for sorting genes
sort.col <- "msd"
## 3. sort increasing or decreasing
sort.decr = TRUE
## 4. sort absolute or not
sort.abs = FALSE
## for p-value, the values should be: sort.decr=FALSE, sort.abs=FALSE
## 5. choose mset explicitely; this is one of the choices of the user
data(tmod)
mset <- tmod
## 6. which tmod test to use
tmodTest <- tmodCERNOtest # alternative: tmodUtest
## for each of these conditions, we run the tmod statistical test
res <- sapply(data, function(x) {
# this could be shortened
genes <- x[ , gn.col ]
ord   <- x[ , sort.col ]
if(sort.abs) ord <- abs(ord)
ord <- order(ord, decreasing=sort.decr)
genes <- genes[ord]
tmodTest(genes, mset=mset, qval=Inf)
}, simplify=FALSE)
## this can alread be used to generate graphics
tmodPanelPlot(res)
## to make nice blue-red graphics, we need to determine which genes are
## differentially expressed for each module
## Again, we need some input from the user
## 10. p-val threshold
pie.pval <- 0.05
## 11. lfc threshold
pie.lfc <- 1
## 12. which column contains the p-values
pval.col <- "qval"
## 13. which column contains the log fold changes
lfc.col <- "logFC"
## ok, this is a bit complicated, because it is a slow procedure and we
## need to optimize it a bit
lfcs  <- sapply(data, function(x) x[, lfc.col])
pvals <- sapply(data, function(x) x[, pval.col])
## for each module, determine how many genes go up significantly (lfc < -pie.lfc
## and pval <- pie.pval), go up significantly (lfc > pie.lfc and pval < pie.pval),
## or something else
pie <- tmodDecideTests(g=data[[1]][ , gn.col ], lfc=lfcs, pval=pvals, lfc.thr=pie.lfc, pval.thr=pie.pval, mset=mset)
## more choices from user; look up manual for tmodPanelPlot
tmodPanelPlot(res, pie=pie, pie.style="r", grid="b", filter.rows.pval=0.001)
class(lfcs)
head(lfcs)
dim(lfcs)
head(data[[1]][ , gn.col ])
class(data[[1]][ , gn.col ])
class(data)
length(data)
class(data[[1]])
head(data[[1]][, gn.col])
data[[1]]
View
View(data[[1]])
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
class(data[[1]][ , gn.col ])
data[[1]][ , gn.col ]
is.list
is.list(data[[1]][ , gn.col ])
class(data)
class(data[[1]])
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
runApp('~/code/shiny/test')
