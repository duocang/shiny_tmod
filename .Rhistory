actionButton(inputId = "z2a", label = "Sort Z to A", icon = icon("sort-alpha-desc")),
br(),
actionButton(inputId = "all", label = "(Un)select all"),
checkboxGroupInput(inputId = "check2", label = "Choose", choices = paste(1:26, ") Choice ", LETTERS))
),
verbatimTextOutput(outputId = "res2")
)
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint({
input$check1
})
# Sorting asc
observeEvent(input$a2z, {
updateCheckboxGroupInput(
session = session, inputId = "check2", choices = paste(1:26, ") Choice ", LETTERS), selected = input$check2
)
})
# Sorting desc
observeEvent(input$z2a, {
updateCheckboxGroupInput(
session = session, inputId = "check2", choices = paste(26:1, ") Choice ", rev(LETTERS)), selected = input$check2
)
})
output$res2 <- renderPrint({
input$check2
})
# Select all / Unselect all
observeEvent(input$all, {
if (is.null(input$check2)) {
updateCheckboxGroupInput(
session = session, inputId = "check2", selected = paste(1:26, ") Choice ", LETTERS)
)
} else {
updateCheckboxGroupInput(
session = session, inputId = "check2", selected = ""
)
}
})
}
shinyApp(ui = ui, server = server)
runApp('OneDrive/code/shiny/test')
# app ---------------------------------------------------------------------
library("shiny")
ui <- fluidPage(
tags$h1("Example dropdown button"),
br(),
fluidRow(
column(
width = 6,
dropdownButton(
label = "Check some boxes", status = "default", width = 80,
checkboxGroupInput(inputId = "check1", label = "Choose", choices = paste(1:26, ") Choice ", LETTERS))
),
verbatimTextOutput(outputId = "res1")
),
column(
width = 6,
dropdownButton(
label = "Check some boxes", status = "default", width = 80,
actionButton(inputId = "a2z", label = "Sort A to Z", icon = icon("sort-alpha-asc")),
actionButton(inputId = "z2a", label = "Sort Z to A", icon = icon("sort-alpha-desc")),
br(),
actionButton(inputId = "all", label = "(Un)select all"),
checkboxGroupInput(inputId = "check2", label = "Choose", choices = paste(1:26, ") Choice ", LETTERS))
),
verbatimTextOutput(outputId = "res2")
)
)
)
server <- function(input, output, session) {
output$res1 <- renderPrint({
input$check1
})
# Sorting asc
observeEvent(input$a2z, {
updateCheckboxGroupInput(
session = session, inputId = "check2", choices = paste(1:26, ") Choice ", LETTERS), selected = input$check2
)
})
# Sorting desc
observeEvent(input$z2a, {
updateCheckboxGroupInput(
session = session, inputId = "check2", choices = paste(26:1, ") Choice ", rev(LETTERS)), selected = input$check2
)
})
output$res2 <- renderPrint({
input$check2
})
# Select all / Unselect all
observeEvent(input$all, {
if (is.null(input$check2)) {
updateCheckboxGroupInput(
session = session, inputId = "check2", selected = paste(1:26, ") Choice ", LETTERS)
)
} else {
updateCheckboxGroupInput(
session = session, inputId = "check2", selected = ""
)
}
})
}
shinyApp(ui = ui, server = server)
runApp('OneDrive/code/shiny/test')
library("shiny")
ui <- fluidPage(
tags$h1("Example dropdown button"),
br(),
fluidRow(
column(
width = 6,
dropdownButton(
label = "Check some boxes", status = "default", width = 450,
tags$label("Choose :"),
fluidRow(
column(
width = 4,
checkboxGroupInput(inputId = "check1a", label = NULL, choices = paste0(1:10, ") ", LETTERS[1:10]))
),
column(
width = 4,
checkboxGroupInput(inputId = "check1b", label = NULL, choices = paste0(11:20, ") ", LETTERS[11:20]))
),
column(
width = 4,
checkboxGroupInput(inputId = "check1c", label = NULL, choices = paste0(21:26, ") ", LETTERS[21:26]))
)
)
),
verbatimTextOutput(outputId = "res1")
),
column(
width = 6,
tags$style(".container { border:2px solid steelblue; width: 100%; height: 200px; overflow-y: scroll; }"),
dropdownButton(
label = "Check some boxes", status = "default", width = 120,
tags$div(
class = "container",
checkboxGroupInput(inputId = "check2", label = "Choose", choices = paste0(1:26, ") ", LETTERS))
)
),
verbatimTextOutput(outputId = "res2")
)
)
)
server <- function(input, output, session) {
valuesCheck1 <- reactiveValues(x = NULL)
observeEvent(input$check1a, valuesCheck1$x <- unique(c(valuesCheck1$x, input$check1a)))
observeEvent(input$check1b, valuesCheck1$x <- unique(c(valuesCheck1$x, input$check1b)))
observeEvent(input$check1c, valuesCheck1$x <- unique(c(valuesCheck1$x, input$check1c)))
output$res1 <- renderPrint({
valuesCheck1$x
})
output$res2 <- renderPrint({
input$check2
})
}
shinyApp(ui = ui, server = server)
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
library(shiny)
shinyApp(
shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
actionButton('roll','roll'),
uiOutput('buttons')
),
mainPanel(
textOutput('stuff')
)
)
)),
shinyServer(function(input, output) {
n <- eventReactive(input$roll, {
num <- sample(1:100,1)
sample(1:num, num, replace=FALSE)
})
output$buttons <- renderUI({
lapply(1:length(n()), function(i) {
actionButton(as.character(n()[i]), as.character(n()[i]) )
})
})
output$stuff <- renderText({
val <- which(lapply(paste(n()), function(i) input[[i]]) == TRUE)
if (length(val))
sprintf("Picked %s!", paste(n())[val])
})
})
)
runApp('OneDrive/code/shiny/test')
library("shiny")
ui <- fluidPage(
numericInput("numButtons", "Number of buttons to generate",
min = 1, max = 100, value = NULL),
actionButton("go", "Submit"),
uiOutput("ui")
)
server <- function(input, output) {
# Keep track of which observer has been already created
vals <- reactiveValues(x = NULL, y = NULL)
makeObservers <- eventReactive(input$go, {
IDs <- seq_len(input$numButtons)
# For the first time you press the actionButton, create
# observers and save the sequence of integers which gives
# you unique identifiers of created observers
if (is.null(vals$x)) {
res <- lapply(IDs, function (x) {
observeEvent(input[[paste0("add_", x)]], {
print(paste0("add_", x))
})
})
vals$x <- 1
vals$y <- IDs
print("else1")
# When you press the actionButton for the second time you want to only create
# observers that are not defined yet
#
# If all new IDs are are the same as the previous IDs return NULLL
} else if (all(IDs %in% vals$y)) {
print("else2: No new IDs/observers")
return(NULL)
# Otherwise just create observers that are not yet defined and overwrite
# reactive values
} else {
new_ind <- !(IDs %in% vals$y)
print(paste0("else3: # of new observers = ", length(IDs[new_ind])))
res <- lapply(IDs[new_ind], function (x) {
observeEvent(input[[paste0("add_", x)]], {
print(paste0("add_", x))
})
})
# update reactive values
vals$y <- IDs
}
res
})
observeEvent(input$go, {
output$ui <- renderUI({
num <- as.numeric(isolate(input$numButtons))
rows <- lapply(1:num, function (x) {
actionButton(inputId = paste0("add_", x),
label = paste0("add_", x))
})
do.call(fluidRow, rows)
})
makeObservers()
})
}
shinyApp(ui, server)
# An example based on http://shiny.rstudio.com/articles/dynamic-ui.html
library(shiny)
ui = basicPage(
fluidRow(
actionButton(inputId = "add_buttons", label = "Add 5 Buttons")
),
uiOutput("more_buttons") # this is where the dynamically added buttons will go.
)
server = function(input, output)
{
# We need to track the actionButtons and their respective observeEvents
rvs = reactiveValues(buttons = list(), observers = list())
observeEvent(input$add_buttons,{
l = length(rvs$buttons) + 1
for(i in l:(l+4)) {
rvs$buttons[[i]] = actionButton(inputId = paste0("button",i), label = i)
}
rvs$observers = lapply(
l:(l+4),
function(i) {
observeEvent(input[[paste0("button",i)]],
print(sprintf("You clicked button number %d",i))
)
}
)
}
)
output$more_buttons = renderUI({
do.call(fluidRow, rvs$buttons) # Add the dynamic buttons into a single fluidRow
})
}
shinyApp(ui, server)
runApp('OneDrive/code/shiny/test')
LETTERS
paste(LETTERS)
paste("A", 1, "%")
paste(1:4, letters[1:4])
paste(1:10)
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
shiny::runApp('OneDrive/code/shiny/test')
View(catf)
View(getMsetReal)
options(error = browser())
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
library(shiny)
library(shinyjs)
ui <- navbarPage(
"Bootstrap scrollspy on multiple tabs",
id = "navbar",
header = div(
useShinyjs(),
extendShinyjs("www/app-shinyjs.js", functions = c("updateScrollspy")),
includeCSS("www/app.css"),
includeScript("https://cdnjs.cloudflare.com/ajax/libs/jquery-scrollTo/1.4.3/jquery.scrollTo.min.js")
),
# tab 1 contains 4 sections and a scrollspy on the left with text
tabPanel(
"tab1",
div(id = "tab1-content",
fluidRow(
column(
4,
div(
id = "tab1-scrollspy",
class = "potential-scrollspy",
tags$ul(
class = "nav nav-pills nav-stacked",
tags$li(tags$a(href = "#section1-1", "Section 1-1")),
tags$li(tags$a(href = "#section1-2", "Section 1-2")),
tags$li(tags$a(href = "#section1-3", "Section 1-3")),
tags$li(tags$a(href = "#section1-4", "Section 1-4"))
)
)
),
column(
8,
div(id = "section1-1",
class = "scrollspy-section",
p('Section 1-1')
),
div(id = "section1-2",
class = "scrollspy-section",
p('Section 1-2')
),
div(id = "section1-3",
class = "scrollspy-section",
p('Section 1-3')
),
div(id = "section1-4",
class = "scrollspy-section",
p('Section 1-4')
)
)
)
)
),
# tab 2 contains 3 sections and a scrollspy on the right without text
tabPanel(
"tab2",
div(id = "tab2-content",
fluidRow(
column(
8,
div(id = "section2-1",
class = "scrollspy-section",
p('Section 2-1')
),
div(id = "section2-2",
class = "scrollspy-section",
p('Section 2-2')
),
div(id = "section2-3",
class = "scrollspy-section",
p('Section 2-3')
)
),
column(
4,
div(
id = "tab2-scrollspy",
class = "potential-scrollspy",
`data-offset` = 50,
tags$ul(
class = "nav nav-pills nav-stacked",
tags$li(tags$a(href = "#section2-1")),
tags$li(tags$a(href = "#section2-2")),
tags$li(tags$a(href = "#section2-3"))
)
)
)
)
)
)
)
server <- function(input, output, session) {
# when changing tabs, update the scrollspy control
observeEvent(input$navbar, {
js$updateScrollspy(input$navbar)
})
}
shinyApp(ui = ui, server = server)
runApp('forTest')
runApp('OneDrive/code/shiny/test')
shinyApp(
ui = fluidPage(
actionButton("show", "Show"),
actionButton("remove", "Remove")
),
server = function(input, output) {
# A notification ID
id <- NULL
observeEvent(input$show, {
# If there's currently a notification, don't add another
if (!is.null(id))
return()
# Save the ID for removal later
id <<- showNotification(paste("Notification message"), duration = 0)
})
observeEvent(input$remove, {
if (!is.null(id))
removeNotification(id)
id <<- NULL
})
}
)
a <- read.csv("/Users/song/Downloads/Transactions_701_135466100_20170905_100742.csv")
a <- read.csv("/Users/song/Downloads/Transactions_701_135466100_20170905_100742.csv", skip = 4)
View(a)
a <- read.csv("/Users/song/Downloads/Transactions_701_135466100_20170905_100742.csv", skip = 4, sep = ";")
sum(a$Debit)
sum(a$Debit, NA, na.rm = TRUE)
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
runApp('OneDrive/code/shiny/test')
install.packages(c('shiny', 'ggvis', 'dplyr', 'RSQLite'))
install.packages(c("shiny", "ggvis", "dplyr", "RSQLite"))
bill <- fread("/Users/song/OneDrive/code/R_Shiny/lifeInGermany/bill.csv")
library(data.table)
bill <- fread("/Users/song/OneDrive/code/R_Shiny/lifeInGermany/bill.csv")
View(bill)
fields <- names(bill)
fields
fields <- tolower(names(bill))
fields
fields <- gsub(" ", "_", tolower(names(bill)))
fields
fields <- gsub(" ", "_", gsub("/", "", tolower(names(bill))))
fields
gsub("/", "", tolower(names(bill)))
fields <- gsub("[[:space:]]", "_", gsub("/", "", tolower(names(bill))))
fields
fields <- gsub("[[:space:]]+", "_", gsub("/", "", tolower(names(bill))))
fields <- gsub("[[:space:]]+", "_", gsub("/", "", tolower(names(bill))))
fields
names(bill) <- fields
View(bill)
beneficiary_originator <- unique(bill$beneficiary_originator)
beneficiary_originator
c(1,2:4, 12:17)
shiny::runApp('OneDrive/code/shiny/test')
